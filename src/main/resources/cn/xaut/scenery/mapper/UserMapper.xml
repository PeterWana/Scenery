<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.xaut.scenery.mapper.UserMapper">

    <insert id="insertUserByRegister">
        insert into user values (null, #{userName}, #{userPassword}, #{userSex}, #{userAge}, #{userNum}, null)
    </insert>

    <select id="getUserByUserName" resultType="User">
        select * from user where user_name=#{userName}
    </select>

    <select id="getUserByUserNameAndPassword" resultType="User">
        select * from user where user_name=#{userName} and user_password=#{userPassword}
    </select>

    <select id="getAllUser" resultType="User">
        select * from user
    </select>

    <delete id="deleteAUserById">
        delete from user where user_id=#{userId}
    </delete>

    <update id="updateAUserById">
        update user set user_name=#{userName}, user_password=#{userPassword}, user_sex=#{userSex}, user_age=#{userAge}, user_num=#{userNum} where user_id=#{userId}
    </update>

    <update id="updateAUserByUserName">
        update user set user_name=#{userName}, user_password=#{userPassword}, user_sex=#{userSex}, user_age=#{userAge}, user_num=#{userNum} where user_name=#{userName}
    </update>

    <select id="getAUserById" resultType="User">
        select * from user where user_id = #{userId}
    </select>

    <insert id="insertMoreUser">
        insert into user values
        <foreach collection="users" item="user" separator=",">
            (null, #{user.userName}, #{user.userPassword}, #{user.userSex}, #{user.userAge}, #{user.userNum}, null)
        </foreach>
    </insert>

    <delete id="deleteMoreByArray">
        delete from user where
        <foreach collection="userIds" item="userId" separator="or">
            user_id = #{userId}
        </foreach>
    </delete>

    <select id="getUserByLike" resultType="User">
        select * from user where user_name like concat('%',#{mohu},'%')
    </select>

    <resultMap id="getRecommendMap" type="User">
        <id property="userId" column="user_id"></id>
        <result property="userName" column="user_name"></result>
        <collection property="tour" ofType="Tour" javaType="java.util.List">
            <id property="tourId" column="tour_id"></id>
            <collection property="sight" ofType="Sight" javaType="java.util.List">
                <id property="sightId" column="sight_id"></id>
                    <collection property="scene" ofType="Scene" javaType="java.util.List">
                        <id property="sceneId" column="scene_id"></id>
                        <result property="sceneName" column="scene_name"></result>
                        <result property="sceneType" column="scene_type"></result>
                        <result property="sceneImg" column="scene_img"></result>
                    </collection>
            </collection>
        </collection>
    </resultMap>

    <select id="getRecommendByUserId" resultMap="getRecommendMap">
        select user.user_id, user.user_name,
               tour.tour_id,
               sight.sight_id,
               scene.scene_id, scene.scene_name, scene.scene_type, scene.scene_img
        from user left join tour on user.user_id=tour.tour_user_id
                  left join sight on tour.tour_id=sight.sight_tour_id
                  left join scene on sight.sight_scene_id=scene.scene_id
        where user.user_id=#{userId}
    </select>

</mapper>